{"ast":null,"code":"import { ADD_TO_CART, SET_CART_COUNT, INCREMENT } from \"./actions\";\nimport produce from 'immer';\nconst initialState = {\n  cart: JSON.parse(localStorage.getItem(\"cart\")) || [],\n  cartCount: JSON.parse(localStorage.getItem(\"cartCount\")) || 0\n};\n\nconst dataReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_TO_CART:\n      {\n        return produce(state, draftState => {\n          const index = draftState.cart.findIndex(el => el.article === action.payload.article);\n          const currentCard = { ...action.payload\n          };\n\n          if (index === -1) {\n            currentCard.count = 1;\n            draftState.cart.push(currentCard);\n          } else {\n            draftState.cart[index].count += 1;\n          }\n\n          localStorage.setItem(\"cart\", JSON.stringify(draftState.cart));\n        });\n      }\n\n    case SET_CART_COUNT:\n      {\n        return produce(state, draftState => {\n          const newCartCount = draftState.cart.reduce((sum, current) => sum + current.count, 0);\n          draftState.cartCount = newCartCount;\n          localStorage.setItem(\"cartCount\", JSON.stringify(newCartCount));\n        });\n      }\n\n    case INCREMENT:\n      {\n        return produce(state, draftState => {\n          const currentCart = draftState.cart;\n          const idx = currentCart.findIndex(el => el.article === action.payload);\n          currentCart[idx].count += 1;\n          dispatch(addToCartAC(currentCart[idx]));\n          dispatch(setCartCountAC(currentCart[idx]));\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nexport default dataReducer;","map":{"version":3,"names":["ADD_TO_CART","SET_CART_COUNT","INCREMENT","produce","initialState","cart","JSON","parse","localStorage","getItem","cartCount","dataReducer","state","action","type","draftState","index","findIndex","el","article","payload","currentCard","count","push","setItem","stringify","newCartCount","reduce","sum","current","currentCart","idx","dispatch","addToCartAC","setCartCountAC"],"sources":["/Users/romarumarchyk/Desktop/MyGitLabHW/react-funk/src/store/cart/cartReducer.js"],"sourcesContent":["import { ADD_TO_CART, SET_CART_COUNT, INCREMENT } from \"./actions\";\nimport produce from 'immer';\n\nconst initialState = {\n    cart: JSON.parse(localStorage.getItem(\"cart\")) || [],\n    cartCount: JSON.parse(localStorage.getItem(\"cartCount\")) || 0,\n}\n\nconst dataReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_TO_CART: {\n            return produce(state, draftState => {\n\n                const index = draftState.cart.findIndex(el => el.article === action.payload.article)\n                const currentCard = { ...action.payload }\n\n                if (index === -1) {\n\n                    currentCard.count = 1\n                    draftState.cart.push(currentCard);\n\n                } else {\n\n                    draftState.cart[index].count += 1;\n                }\n\n                localStorage.setItem(\"cart\", JSON.stringify(draftState.cart));\n\n            });\n        }\n\n        case SET_CART_COUNT: {\n            return produce(state, draftState => {\n\n                const newCartCount = draftState.cart.reduce((sum, current) => sum + current.count, 0);\n\n                draftState.cartCount = newCartCount;\n\n                localStorage.setItem(\"cartCount\", JSON.stringify(newCartCount));\n\n            })\n\n        }\n\n        case INCREMENT: {\n            return produce(state, draftState => {\n                const currentCart = draftState.cart\n                const idx = currentCart.findIndex(el => el.article === action.payload)\n\n                currentCart[idx].count += 1\n\n                dispatch(addToCartAC(currentCart[idx]))\n                dispatch(setCartCountAC(currentCart[idx]))\n            })\n\n        }\n        default: {\n            return state\n        }\n    }\n}\n\nexport default dataReducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,EAAsCC,SAAtC,QAAuD,WAAvD;AACA,OAAOC,OAAP,MAAoB,OAApB;AAEA,MAAMC,YAAY,GAAG;EACjBC,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,KAA4C,EADjC;EAEjBC,SAAS,EAAEJ,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,KAAiD;AAF3C,CAArB;;AAKA,MAAME,WAAW,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBR,YAAyB;EAAA,IAAXS,MAAW;;EAClD,QAAQA,MAAM,CAACC,IAAf;IACI,KAAKd,WAAL;MAAkB;QACd,OAAOG,OAAO,CAACS,KAAD,EAAQG,UAAU,IAAI;UAEhC,MAAMC,KAAK,GAAGD,UAAU,CAACV,IAAX,CAAgBY,SAAhB,CAA0BC,EAAE,IAAIA,EAAE,CAACC,OAAH,KAAeN,MAAM,CAACO,OAAP,CAAeD,OAA9D,CAAd;UACA,MAAME,WAAW,GAAG,EAAE,GAAGR,MAAM,CAACO;UAAZ,CAApB;;UAEA,IAAIJ,KAAK,KAAK,CAAC,CAAf,EAAkB;YAEdK,WAAW,CAACC,KAAZ,GAAoB,CAApB;YACAP,UAAU,CAACV,IAAX,CAAgBkB,IAAhB,CAAqBF,WAArB;UAEH,CALD,MAKO;YAEHN,UAAU,CAACV,IAAX,CAAgBW,KAAhB,EAAuBM,KAAvB,IAAgC,CAAhC;UACH;;UAEDd,YAAY,CAACgB,OAAb,CAAqB,MAArB,EAA6BlB,IAAI,CAACmB,SAAL,CAAeV,UAAU,CAACV,IAA1B,CAA7B;QAEH,CAjBa,CAAd;MAkBH;;IAED,KAAKJ,cAAL;MAAqB;QACjB,OAAOE,OAAO,CAACS,KAAD,EAAQG,UAAU,IAAI;UAEhC,MAAMW,YAAY,GAAGX,UAAU,CAACV,IAAX,CAAgBsB,MAAhB,CAAuB,CAACC,GAAD,EAAMC,OAAN,KAAkBD,GAAG,GAAGC,OAAO,CAACP,KAAvD,EAA8D,CAA9D,CAArB;UAEAP,UAAU,CAACL,SAAX,GAAuBgB,YAAvB;UAEAlB,YAAY,CAACgB,OAAb,CAAqB,WAArB,EAAkClB,IAAI,CAACmB,SAAL,CAAeC,YAAf,CAAlC;QAEH,CARa,CAAd;MAUH;;IAED,KAAKxB,SAAL;MAAgB;QACZ,OAAOC,OAAO,CAACS,KAAD,EAAQG,UAAU,IAAI;UAChC,MAAMe,WAAW,GAAGf,UAAU,CAACV,IAA/B;UACA,MAAM0B,GAAG,GAAGD,WAAW,CAACb,SAAZ,CAAsBC,EAAE,IAAIA,EAAE,CAACC,OAAH,KAAeN,MAAM,CAACO,OAAlD,CAAZ;UAEAU,WAAW,CAACC,GAAD,CAAX,CAAiBT,KAAjB,IAA0B,CAA1B;UAEAU,QAAQ,CAACC,WAAW,CAACH,WAAW,CAACC,GAAD,CAAZ,CAAZ,CAAR;UACAC,QAAQ,CAACE,cAAc,CAACJ,WAAW,CAACC,GAAD,CAAZ,CAAf,CAAR;QACH,CARa,CAAd;MAUH;;IACD;MAAS;QACL,OAAOnB,KAAP;MACH;EAjDL;AAmDH,CApDD;;AAsDA,eAAeD,WAAf"},"metadata":{},"sourceType":"module"}