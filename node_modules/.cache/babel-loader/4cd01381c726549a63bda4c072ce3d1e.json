{"ast":null,"code":"import { ADD_TO_CART, SET_CART_COUNT, INCREMENT, DICREMENT, REMOVE_FROM_CART } from \"./actions\";\nimport produce from 'immer';\nconst initialState = {\n  favorite: JSON.parse(localStorage.getItem(\"favorite\")) || [],\n  isFavorite: false\n};\n\nconst favoriteReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_TO_CART:\n      {\n        return produce(state, draftState => {\n          const index = draftState.cart.findIndex(el => el.article === action.payload.article);\n          const currentCard = { ...action.payload\n          };\n\n          if (index === -1) {\n            currentCard.count = 1;\n            draftState.cart.push(currentCard);\n          } else {\n            draftState.cart[index].count += 1;\n          }\n\n          localStorage.setItem(\"cart\", JSON.stringify(draftState.cart));\n        });\n      }\n\n    case SET_CART_COUNT:\n      {\n        return produce(state, draftState => {\n          const newCartCount = draftState.cart.reduce((sum, current) => sum + current.count, 0);\n          draftState.cartCount = newCartCount;\n          localStorage.setItem(\"cartCount\", JSON.stringify(newCartCount));\n        });\n      }\n\n    case INCREMENT:\n      {\n        return produce(state, draftState => {\n          const currentCart = draftState.cart;\n          const idx = currentCart.findIndex(el => el.article === action.payload);\n          currentCart[idx].count += 1;\n          draftState.cart = currentCart;\n          const newCartCount = draftState.cart.reduce((sum, current) => sum + current.count, 0);\n          localStorage.setItem(\"cart\", JSON.stringify(currentCart));\n          localStorage.setItem(\"cartCount\", JSON.stringify(newCartCount));\n        });\n      }\n\n    case DICREMENT:\n      {\n        return produce(state, draftState => {\n          const currentCart = draftState.cart;\n          const idx = currentCart.findIndex(el => el.article === action.payload);\n          currentCart[idx].count -= 1;\n          draftState.cart = currentCart;\n          const newCartCount = draftState.cart.reduce((sum, current) => sum + current.count, 0);\n          localStorage.setItem(\"cart\", JSON.stringify(currentCart));\n          localStorage.setItem(\"cartCount\", JSON.stringify(newCartCount));\n        });\n      }\n\n    case REMOVE_FROM_CART:\n      {\n        return produce(state, draftState => {\n          const currentCart = draftState.cart;\n          const idx = currentCart.findIndex(el => el.article === action.payload);\n          currentCart.splice(idx, 1);\n          draftState.cart = currentCart;\n          const newCartCount = draftState.cart.reduce((sum, current) => sum + current.count, 0);\n          localStorage.setItem(\"cart\", JSON.stringify(currentCart));\n          localStorage.setItem(\"cartCount\", JSON.stringify(newCartCount));\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nexport default favoriteReducer;","map":{"version":3,"names":["ADD_TO_CART","SET_CART_COUNT","INCREMENT","DICREMENT","REMOVE_FROM_CART","produce","initialState","favorite","JSON","parse","localStorage","getItem","isFavorite","favoriteReducer","state","action","type","draftState","index","cart","findIndex","el","article","payload","currentCard","count","push","setItem","stringify","newCartCount","reduce","sum","current","cartCount","currentCart","idx","splice"],"sources":["/Users/romarumarchyk/Desktop/MyGitLabHW/react-funk/src/store/favorite/favoriteReducer.js"],"sourcesContent":["import { ADD_TO_CART, SET_CART_COUNT, INCREMENT, DICREMENT, REMOVE_FROM_CART } from \"./actions\";\nimport produce from 'immer';\n\n\nconst initialState = {\n    favorite: JSON.parse(localStorage.getItem(\"favorite\")) || [],\n    isFavorite: false,\n}\n\nconst favoriteReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_TO_CART: {\n            return produce(state, draftState => {\n\n                const index = draftState.cart.findIndex(el => el.article === action.payload.article)\n                const currentCard = { ...action.payload }\n\n                if (index === -1) {\n\n                    currentCard.count = 1\n                    draftState.cart.push(currentCard);\n\n                } else {\n\n                    draftState.cart[index].count += 1;\n                }\n\n                localStorage.setItem(\"cart\", JSON.stringify(draftState.cart));\n\n            });\n        }\n\n        case SET_CART_COUNT: {\n            return produce(state, draftState => {\n\n                const newCartCount = draftState.cart.reduce((sum, current) => sum + current.count, 0);\n\n                draftState.cartCount = newCartCount;\n\n                localStorage.setItem(\"cartCount\", JSON.stringify(newCartCount));\n\n            })\n\n        }\n\n        case INCREMENT: {\n            return produce(state, draftState => {\n                const currentCart = draftState.cart\n                const idx = currentCart.findIndex(el => el.article === action.payload)\n\n                currentCart[idx].count += 1\n\n                draftState.cart = currentCart;\n\n                const newCartCount = draftState.cart.reduce((sum, current) => sum + current.count, 0);\n                localStorage.setItem(\"cart\", JSON.stringify(currentCart));\n                localStorage.setItem(\"cartCount\", JSON.stringify(newCartCount));\n\n\n\n\n            })\n\n        }\n\n        case DICREMENT: {\n            return produce(state, draftState => {\n                const currentCart = draftState.cart\n                const idx = currentCart.findIndex(el => el.article === action.payload)\n\n                currentCart[idx].count -= 1\n\n                draftState.cart = currentCart;\n\n                const newCartCount = draftState.cart.reduce((sum, current) => sum + current.count, 0);\n                localStorage.setItem(\"cart\", JSON.stringify(currentCart));\n                localStorage.setItem(\"cartCount\", JSON.stringify(newCartCount));\n\n            })\n        }\n\n        case REMOVE_FROM_CART: {\n            return produce(state, draftState => {\n                const currentCart = draftState.cart\n                const idx = currentCart.findIndex(el => el.article === action.payload)\n\n                currentCart.splice(idx, 1)\n\n                draftState.cart = currentCart;\n\n                const newCartCount = draftState.cart.reduce((sum, current) => sum + current.count, 0);\n                localStorage.setItem(\"cart\", JSON.stringify(currentCart));\n                localStorage.setItem(\"cartCount\", JSON.stringify(newCartCount));\n\n            })\n        }\n\n        default: {\n            return state\n        }\n    }\n}\n\nexport default favoriteReducer"],"mappings":"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"},"metadata":{},"sourceType":"module"}